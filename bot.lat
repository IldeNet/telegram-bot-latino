incluir ('ajustes')
incluir ('urls')

URL = 'https://api.telegram.org/bot' . api_key . '/'

funcion actualizaciones()
	consulta = peticion(URL . "getUpdates")
	offset = json_decodificar(consulta)
	offset = offset->result[0]->update_id
	si ( offset != "" )
		si offset > 0
			offset = offset + 1
			peticion(URL . "getUpdates?offset=" . offset)
		fin
	fin
  retorno consulta
fin

funcion enviarMensaje(chatId, texto)
  json = peticion(URL . "sendMessage?chat_id=" . chatId . "&text=" . codificar(texto))
		estado = json_decodificar(json)
		retorno estado->ok
fin

funcion enviarInline(chatId, texto, teclado)
  json = peticion(URL . "sendMessage?chat_id=" . chatId . "&text=" . codificar(texto) . "&reply_markup=" .codificar(teclado))
		estado = json_decodificar(json)
		retorno estado->ok
fin

funcion enviarMensaje_markdown(chatId, texto)
  json = peticion(URL . "sendMessage?chat_id=" . chatId . "&text=" . codificar(texto) . "&parse_mode=markdown")
		estado = json_decodificar(json)
		retorno estado->ok
fin

funcion enviarMensaje_html(chatId, texto)
  json = peticion(URL . "sendMessage?chat_id=" . chatId . "&text=" . codificar(texto) . "&parse_mode=html")
		estado = json_decodificar(json)
		retorno estado->ok
fin

funcion enviarAccion(chatId, accion)
  accion = reemplazar(accion, "escribiendo", "typing")
  accion = reemplazar(accion, "subiendo_foto", "upload_photo")
  accion = reemplazar(accion, "subiendo_video", "upload_video")
  accion = reemplazar(accion, "subiendo_audio", "upload_audio")
  accion = reemplazar(accion, "subiendo_documento", "upload_document")
  accion = reemplazar(accion, "grabando_video", "record_video")
  accion = reemplazar(accion, "grabando_audio", "record_audio")
  accion = reemplazar(accion, "buscar_localizacion", "find_location")
  json = peticion(URL . "sendChatAction?chat_id=" . chatId . "&action=" . accion)
		estado = json_decodificar(json)
		retorno estado->ok
fin


funcion reenviarMensaje(chatId, userId, msgId)
  json = peticion(URL . "forwardMessage?chat_id=" . chatId . "&from_chat_id=" . userId . "&message_id=" . msgId)
		estado = json_decodificar(json)
		retorno estado->ok
fin

funcion abandonarChat(chatId)
  json = peticion(URL . "leaveChat?chat_id=" . chatId)
		estado = json_decodificar(json)
		retorno estado->ok
fin

funcion expulsarUsuario(chatId, userId)
	json = peticion(URL . "kickChatMember?chat_id=" . chatId . "&user_id=" . userId)
	peticion(URL . "unbanChatMember?chat_id=" . chatId . "&user_id=" . userId)
		estado = json_decodificar(json)
		retorno estado->ok
fin

funcion banearUsuario(chatId, userId)
  json = peticion(URL . "kickChatMember?chat_id=" . chatId . "&user_id=" . userId)
		estado = json_decodificar(json)
		retorno estado->ok
fin

funcion desbanearUsuario(chatId, userId)
  json = peticion(URL . "unbanChatMember?chat_id=" . chatId . "&user_id=" . userId)
		estado = json_decodificar(json)
		retorno estado->ok
fin

inicio = enviarMensaje_markdown(administrador, "*Bot iniciado*")
si inicio
	imprimir("Confirmación enviada a ".administrador)
sino
	imprimir("Error en confirmación")
fin

mientras verdadero
	res = json_decodificar(actualizaciones())
	msg = {
		"texto": res->result[0]->message->text,
		"id": res->result[0]->message->message_id,
		"fecha": res->result[0]->message->date,
		"fecha_reenvio": res->result[0]->message->forward_date,
		"fecha_editado": res->result[0]->message->edit_date,
		"capcion": res->result[0]->message->caption,
		"nuevo_titulo": res->result[0]->message->new_chat_title,
		"foto_eliminada": res->result[0]->message->delete_chat_photo,
		"grupo_chat_creado": res->result[0]->message->group_chat_created,
		"supergrupo_creado": res->result[0]->message->supergroup_chat_created,
		"canal_chat_creado": res->result[0]->message->channel_chat_created,
		"migrado_para_id": res->result[0]->message->migrate_to_chat_id,
		"migrado_desde_id": res->result[0]->message->migrate_from_chat_id
		}

	usuario = {
		"id": res->result[0]->message->from->id,
		"nombre": res->result[0]->message->from->first_name,
		"apellido": res->result[0]->message->from->last_name,
		"usuario": res->result[0]->message->from->username
			}

	chat = {
		"id": res->result[0]->message->chat->id,
		"titulo": res->result[0]->message->chat->title,
		"usuario": res->result[0]->message->chat->username
			}

	nuevo_usuario = {
		"id": res->result[0]->message->new_chat_member->id,
		"nombre": res->result[0]->message->new_chat_member->first_name,
		"apellido": res->result[0]->message->new_chat_member->last_name,
		"usuario": res->result[0]->message->new_chat_member->username
			}


ayuda = {"inline_keyboard":
[[{"text":"Programación Latino","url":"https://github.com/primitivorm/latino"},
{"text":"Repositorio del Bot","url":"https://github.com/jarriztg/telegram-bot-latino"}
]]}

ejecutar_archivo("comandos.lat")
fin